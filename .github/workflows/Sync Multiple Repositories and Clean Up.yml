name: Sync Multiple Repositories and Clean Up

on:
  schedule:
    - cron: '*/30 * * * *'  # 每半小时运行一次，根据需要调整频率
  push:
    branches:
      - main
  workflow_dispatch:  # 允许手动触发

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Sync Repositories
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e  # 遇到任何错误立即退出

          # 仓库列表
          repos=(
            "github.com/kiddin9/kwrt-packages.git"
           # "github.com/Siriling/5G-Modem-Support.git:fibocom_MHI"
          )

          # 克隆或拉取每个仓库
          for repo in "${repos[@]}"; do
            IFS=':' read -ra repo_info <<< "$repo"
            repo_url="${repo_info[0]}"
            repo_path="${repo_info[1]:-}"

            repo_name=$(basename "$repo_url" .git)
            if [ -d "$repo_name" ]; then
              echo "Updating $repo_name..."
              cd "$repo_name"
              git pull origin main
              cd ..
            else
              echo "Cloning $repo_name..."
              access_repo_url="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@$repo_url"
              echo "Cloning from $access_repo_url"
              git clone "$access_repo_url" "$repo_name"
              cd "$repo_name"
              if [ -n "$repo_path" ]; then
                git sparse-checkout init --cone
                git sparse-checkout set "$repo_path"
                git pull origin main
              fi
              cd ..
            fi
          done

          # 同步所有仓库到一个目标仓库
          target_repo="github.com/t96mytell/openwrt-packages-23.05.git"  # 替换为目标仓库
          target_repo_name=$(basename "$target_repo" .git)
          if [ -d "$target_repo_name" ]; then
            cd "$target_repo_name"
            git pull origin main
          else
            access_target_repo_url="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@$target_repo"
            echo "Cloning from $access_target_repo_url"
            git clone "$access_target_repo_url" "$target_repo_name"
            cd "$target_repo_name"
          fi

          for repo in "${repos[@]}"; do
            IFS=':' read -ra repo_info <<< "$repo"
            repo_url="${repo_info[0]}"
            repo_path="${repo_info[1]:-}"

            repo_name=$(basename "$repo_url" .git)
            cd "../$repo_name"
            git pull origin main
            cd "../$target_repo_name"

            if [ -n "$repo_path" ]; then
              rsync -av --progress "../$repo_name/$repo_path/" "$repo_path/"
              git add "$repo_path"
            else
              git remote add "$repo_name" "../$repo_name"
              git fetch "$repo_name"
              git rebase "$repo_name/main" || (git rebase --abort && git merge --strategy=ours "$repo_name/main")
              git remote remove "$repo_name"
            fi
          done

          git push origin main --force

  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup Old Workflow Runs
        uses: Mattraks/delete-workflow-runs@v1
        with:
          retention_days: 3  # 保留三天内的 workflow 记录
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
